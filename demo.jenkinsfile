pipeline {
  agent any
  parameters {
    string(name: 'SLACK_CHANNEL', defaultValue: '#deploys', description: '')
    choice(name: 'TYPE', choices: 'aut\ncron\ndata', description: 'Autoscaling, Cron or Data')
    booleanParam(name: 'DEPLOY', defaultValue: false, description: 'Update aws ami')
  }

  options {
      ansiColor("xterm")
      timestamps()
      timeout(time: 15, unit: "MINUTES")
  }
  
  environment {
    ARTIFACT = "${env.BUILD_NUMBER}.zip"
    SLACK_MESSAGE = "Job '${env.JOB_NAME}' Build ${env.BUILD_NUMBER} URL ${env.BUILD_URL}"
  }

  stages {
    stage('Run') {
      steps {
          echo "hello from $USER"
          sh "id"
          echo "PATH $PATH"
          echo "workspace ${env.WORKSPACE}"
          sh "mkdir -p demo/src/"
          sh "touch demo.txt"
          sh "wget https://github.com/Kitware/CMake/releases/download/v3.15.0-rc2/cmake-3.15.0-rc2.tar.gz"
          sh "ls -la"
          
          echo "job_name ${env.JOB_NAME}"
          echo "build_number ${env.BUILD_NUMBER}"
          echo "artifact: ${env.ARTIFACT}"
          echo "message: ${env.SLACK_MESSAGE}"
          
          echo "canal ${params.SLACK_CHANNEL}"
          echo "tipo ${params.TYPE}"
          echo "launch ${params.LAUNCH_CONFIGURATION}"
      }
    }
    stage('Inspection') {
      steps {
        parallel (
          syntax: { echo "check syntax" },
          grep: { sh "echo buscando_var_dump" }
        )
      }
    }
    
    stage ('Build') {
      steps {
        script {
          echo "def ID = sh(returnStdout: true, script: "./ami_id.sh ${env.BUILD_NUMBER}").trim()"
          echo "sh "./build_ami.sh ${ID}""
        }
      }
    }
    
    stage ('Deploy') {
      when {
        expression {
          return params.DEPLOY ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/
        }
      }
      steps {
        sh "echo hare_deploy"
        build job: "mydemo", parameters: [
          [$class: 'StringParameterValue', name: "SLACK", value: '#deploys']
        ]
      }
    }

  }
}
